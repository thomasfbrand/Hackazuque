// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import EscrowABI from './contracts/EscrowABI';

contract Escrow is Ownable {
    enum State {
        AWAITING_PAYMENT,
        AWAITING_DELIVERY,
        COMPLETE,
        REFUNDED
    }

    address payable public buyer;
    address payable public seller;
    uint256 public quantity;
    uint256 public releaseTime;
    State public currentState;

    IERC20 public token;
    address public tokenAddress;

    event PaymentReceived();
    event DeliveryConfirmed();
    event Refunded();

    constructor(address payable _buyer, address payable _seller, uint256 _quantity, uint256 _releaseTime, address _tokenAddress) {
        require(_buyer != address(0), "Invalid buyer address");
        require(_seller != address(0), "Invalid seller address");
        require(_quantity > 0, "Invalid quantity");
        require(_releaseTime > block.timestamp, "Invalid release time");
        require(_tokenAddress != address(0), "Invalid token address");

        buyer = _buyer;
        seller = _seller;
        quantity = _quantity;
        releaseTime = _releaseTime;
        currentState = State.AWAITING_PAYMENT;
        tokenAddress = _tokenAddress;
        token = IERC20(tokenAddress);
    }

Here's the modified version of your Escrow contract using the Contract class provided by ethers.js:

csharp
Copy code
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Escrow is Ownable {
    enum State {
        AWAITING_PAYMENT,
        AWAITING_DELIVERY,
        COMPLETE,
        REFUNDED
    }

    address payable public buyer;
    address payable public seller;
    uint256 public quantity;
    uint256 public releaseTime;
    State public currentState;

    IERC20 public token;
    address public tokenAddress;

    event PaymentReceived();
    event DeliveryConfirmed();
    event Refunded();

    constructor(address payable _buyer, address payable _seller, uint256 _quantity, uint256 _releaseTime, address _tokenAddress) {
        require(_buyer != address(0), "Invalid buyer address");
        require(_seller != address(0), "Invalid seller address");
        require(_quantity > 0, "Invalid quantity");
        require(_releaseTime > block.timestamp, "Invalid release time");
        require(_tokenAddress != address(0), "Invalid token address");

        buyer = _buyer;
        seller = _seller;
        quantity = _quantity;
        releaseTime = _releaseTime;
        currentState = State.AWAITING_PAYMENT;
        tokenAddress = _tokenAddress;
        token = IERC20(tokenAddress);
    }

    function deposit() external payable {
        require(currentState == State.AWAITING_PAYMENT, "Invalid state");
        require(msg.value == 0, "This contract doesn't accept ETH");
        uint256 allowance = token.allowance(buyer, address(this));
        require(allowance >= quantity, "Token allowance not enough");
        token.transferFrom(buyer, address(this), quantity);
        emit PaymentReceived();
        currentState = State.AWAITING_DELIVERY;
    }

    function confirmDelivery() external {
        require(msg.sender == buyer || msg.sender == seller, "Invalid sender");
        require(currentState == State.AWAITING_DELIVERY, "Invalid state");
        require(block.timestamp >= releaseTime, "Release time not reached");
        token.transfer(seller, quantity);
        emit DeliveryConfirmed();
        currentState = State.COMPLETE;
    }

    function refund() external {
        require(msg.sender == buyer, "Invalid sender");
        require(currentState == State.AWAITING_DELIVERY, "Invalid state");
        token.transfer(buyer, quantity);
        emit Refunded();
        currentState = State.REFUNDED;
    }

    function lockTokens() external onlyOwner {
        require(currentState == State.AWAITING_PAYMENT, "Invalid state");
        token.transferFrom(buyer, address(this), quantity);
    }

    function unlockTokens() external onlyOwner {
        require(currentState == State.AWAITING_PAYMENT, "Invalid state");
        token.transfer(buyer, quantity);
    }
}

const { ethers } = require('ethers');
const escrowAbi = EscrowABI;
const escrowBytecode = '608060405234801561001057600080fd5b50611d03806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80630b98912b1462000057578063da3e3397146200008d578063e599490514620000ad578063f5537ede14620000cd575b600080fd5b6200007560048036038101906200006f91906200053f565b620000ed565b604051620000849190620005d8565b60405180910390f35b620000ab6004803603810190620000a59190620005f5565b620001c2565b005b620000cb6004803603810190620000c5919062000651565b62000298565b005b620000eb6004803603810190620000e59190620005f5565b62000371565b005b6000808686868686604051620001039062000447565b62000113959493929190620006e5565b604051809103906000f08015801562000130573d6000803e3d6000fd5b5090508673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f62996e5022e07e487b54abaf2c6d897715dac1bdb2c7c56bd2db201dee36ddb5848888604051620001ad9392919062000742565b60405180910390a48091505095945050505050565b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040518363ffffffff1660e01b8152600401620002069291906200077f565b6020604051808303816000875af115801562000226573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024c9190620007e9565b90508062000291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000288906200087c565b60405180910390fd5b5050505050565b600084905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040518463ffffffff1660e01b8152600401620002de939291906200089e565b6020604051808303816000875af1158015620002fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003249190620007e9565b90508062000369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000360906200092b565b60405180910390fd5b505050505050565b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401620003b59291906200077f565b6020604051808303816000875af1158015620003d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003fb9190620007e9565b90508062000440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000437906200099d565b60405180910390fd5b5050505050565b61130e80620009c083390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000487826200045a565b9050919050565b62000499816200047a565b8114620004a557600080fd5b50565b600081359050620004b9816200048e565b92915050565b6000620004cc826200045a565b9050919050565b620004de81620004bf565b8114620004ea57600080fd5b50565b600081359050620004fe81620004d3565b92915050565b6000819050919050565b620005198162000504565b81146200052557600080fd5b50565b60008135905062000539816200050e565b92915050565b600080600080600060a086880312156200055e576200055d62000455565b5b60006200056e88828901620004a8565b95505060206200058188828901620004ed565b94505060406200059488828901620004ed565b9350506060620005a78882890162000528565b9250506080620005ba8882890162000528565b9150509295509295909350565b620005d2816200047a565b82525050565b6000602082019050620005ef6000830184620005c7565b92915050565b60008060006060848603121562000611576200061062000455565b5b60006200062186828701620004a8565b93505060206200063486828701620004a8565b9250506040620006478682870162000528565b9150509250925092565b600080600080608085870312156200066e576200066d62000455565b5b60006200067e87828801620004a8565b94505060206200069187828801620004a8565b9350506040620006a487828801620004a8565b9250506060620006b78782880162000528565b91505092959194509250565b620006ce81620004bf565b82525050565b620006df8162000504565b82525050565b600060a082019050620006fc6000830188620005c7565b6200070b6020830187620006c3565b6200071a6040830186620006c3565b620007296060830185620006d4565b620007386080830184620006d4565b9695505050505050565b6000606082019050620007596000830186620005c7565b620007686020830185620006d4565b620007776040830184620006d4565b949350505050565b6000604082019050620007966000830185620005c7565b620007a56020830184620006d4565b9392505050565b60008115159050919050565b620007c381620007ac565b8114620007cf57600080fd5b50565b600081519050620007e381620007b8565b92915050565b60006020828403121562000802576200080162000455565b5b60006200081284828501620007d2565b91505092915050565b600082825260208201905092915050565b7f4661696c656420746f20617070726f766520746f6b656e000000000000000000600082015250565b6000620008646017836200081b565b915062000871826200082c565b602082019050919050565b60006020820190508181036000830152620008978162000855565b9050919050565b6000606082019050620008b56000830186620005c7565b620008c46020830185620005c7565b620008d36040830184620006d4565b949350505050565b7f4661696c656420746f207472616e7366657220746f6b656e2066726f6d000000600082015250565b600062000913601d836200081b565b91506200092082620008db565b602082019050919050565b60006020820190508181036000830152620009468162000904565b9050919050565b7f4661696c656420746f207472616e7366657220746f6b656e0000000000000000600082015250565b6000620009856018836200081b565b915062000992826200094d565b602082019050919050565b60006020820190508181036000830152620009b88162000976565b905091905056fe60806040523480156200001157600080fd5b506040516200130e3803806200130e8339818101604052810190620000379190620002fb565b4281116200004457600080fd5b818573ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401620000809190620003ee565b602060405180830381865afa1580156200009e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c491906200040b565b101562000108576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ff906200049e565b60405180910390fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600381905550806004819055506000600560006101000a81548160ff02191690836003811115620002015762000200620004c0565b5b02179055505050505050620004ef565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002438262000216565b9050919050565b620002558162000236565b81146200026157600080fd5b50565b60008151905062000275816200024a565b92915050565b6000620002888262000216565b9050919050565b6200029a816200027b565b8114620002a657600080fd5b50565b600081519050620002ba816200028f565b92915050565b6000819050919050565b620002d581620002c0565b8114620002e157600080fd5b50565b600081519050620002f581620002ca565b92915050565b600080600080600060a086880312156200031a576200031962000211565b5b60006200032a8882890162000264565b95505060206200033d88828901620002a9565b94505060406200035088828901620002a9565b93505060606200036388828901620002e4565b92505060806200037688828901620002e4565b9150509295509295909350565b6000819050919050565b6000620003ae620003a8620003a28462000216565b62000383565b62000216565b9050919050565b6000620003c2826200038d565b9050919050565b6000620003d682620003b5565b9050919050565b620003e881620003c9565b82525050565b6000602082019050620004056000830184620003dd565b92915050565b60006020828403121562000424576200042362000211565b5b60006200043484828501620002e4565b91505092915050565b600082825260208201905092915050565b7f42757965722062616c616e6365206973206e6f742073756666696369656e7400600082015250565b600062000486601f836200043d565b915062000493826200044e565b602082019050919050565b60006020820190508181036000830152620004b98162000477565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610e0f80620004ff6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806386d1a69f1161006657806386d1a69f146101115780639d76ea581461011b578063aa8c217c14610139578063b91d400114610157578063d0e30db0146101755761009e565b806308551a53146100a35780630c3f6acf146100c1578063590e1ae3146100df5780635e10177b146100e95780637150d8ae146100f3575b600080fd5b6100ab61017f565b6040516100b89190610a28565b60405180910390f35b6100c96101a5565b6040516100d69190610aba565b60405180910390f35b6100e76101b8565b005b6100f1610380565b005b6100fb610548565b6040516101089190610a28565b60405180910390f35b61011961056e565b005b6101236106eb565b6040516101309190610af6565b60405180910390f35b61014161070f565b60405161014e9190610b2a565b60405180910390f35b61015f610715565b60405161016c9190610b2a565b60405180910390f35b61017d61071b565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021257600080fd5b6001600381111561022657610225610a43565b5b600560009054906101000a900460ff16600381111561024857610247610a43565b5b1461025257600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040518363ffffffff1660e01b81526004016102d1929190610ba4565b6020604051808303816000875af11580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103149190610c0a565b610353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a90610c94565b60405180910390fd5b6003600560006101000a81548160ff0219169083600381111561037957610378610a43565b5b0217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103da57600080fd5b600160038111156103ee576103ed610a43565b5b600560009054906101000a900460ff1660038111156104105761040f610a43565b5b1461041a57600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040518363ffffffff1660e01b8152600401610499929190610ba4565b6020604051808303816000875af11580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190610c0a565b61051b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051290610c94565b60405180910390fd5b6002600560006101000a81548160ff0219169083600381111561054157610540610a43565b5b0217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600381111561058257610581610a43565b5b600560009054906101000a900460ff1660038111156105a4576105a3610a43565b5b146105ae57600080fd5b6004544210156105bd57600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040518363ffffffff1660e01b815260040161063c929190610ba4565b6020604051808303816000875af115801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610c0a565b6106be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b590610c94565b60405180910390fd5b6002600560006101000a81548160ff021916908360038111156106e4576106e3610a43565b5b0217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077557600080fd5b6000600381111561078957610788610a43565b5b600560009054906101000a900460ff1660038111156107ab576107aa610a43565b5b146107b557600080fd5b60035460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b8152600401610835929190610cb4565b602060405180830381865afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190610d09565b10156108b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ae90610d82565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306003546040518463ffffffff1660e01b815260040161093893929190610da2565b6020604051808303816000875af1158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610c0a565b6109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190610c94565b60405180910390fd5b6001600560006101000a81548160ff021916908360038111156109e0576109df610a43565b5b0217905550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a12826109e7565b9050919050565b610a2281610a07565b82525050565b6000602082019050610a3d6000830184610a19565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610a8357610a82610a43565b5b50565b6000819050610a9482610a72565b919050565b6000610aa482610a86565b9050919050565b610ab481610a99565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b6000610ae0826109e7565b9050919050565b610af081610ad5565b82525050565b6000602082019050610b0b6000830184610ae7565b92915050565b6000819050919050565b610b2481610b11565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000819050919050565b6000610b6a610b65610b60846109e7565b610b45565b6109e7565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000604082019050610bb96000830185610b95565b610bc66020830184610b1b565b9392505050565b600080fd5b60008115159050919050565b610be781610bd2565b8114610bf257600080fd5b50565b600081519050610c0481610bde565b92915050565b600060208284031215610c2057610c1f610bcd565b5b6000610c2e84828501610bf5565b91505092915050565b600082825260208201905092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000610c7e601583610c37565b9150610c8982610c48565b602082019050919050565b60006020820190508181036000830152610cad81610c71565b9050919050565b6000604082019050610cc96000830185610b95565b610cd66020830184610ae7565b9392505050565b610ce681610b11565b8114610cf157600080fd5b50565b600081519050610d0381610cdd565b92915050565b600060208284031215610d1f57610d1e610bcd565b5b6000610d2d84828501610cf4565b91505092915050565b7f436f6e747261637420616c6c6f77616e6365206973206e6f7420736574000000600082015250565b6000610d6c601d83610c37565b9150610d7782610d36565b602082019050919050565b60006020820190508181036000830152610d9b81610d5f565b9050919050565b6000606082019050610db76000830186610b95565b610dc46020830185610ae7565b610dd16040830184610b1b565b94935050505056fea2646970667358221220f05622f49ae7c6770237de71b464e1bb47a7c0c6bcf410d2b18bf2d5051befce64736f6c63430008130033a264697066735822122001bdcb5da4ca2c1ea85c01bd20691370414bf39eb2717e3312ea26e6549f76f764736f6c63430008130033';

    async function deployEscrow(_buyer, _seller, _quantity) {
        const provider = new ethers.JsonRpcProvider('http://localhost:8545');
        const signer = provider.getSigner();
        const Escrow = new ethers.ContractFactory(escrowAbi, escrowBytecode, signer);
        const buyer = _buyer;
        const seller = _seller;
        const quantity = _quantity;


    function deposit() external payable {
        require(currentState == State.AWAITING_PAYMENT, "Invalid state");
        require(msg.value == 0, "This contract doesn't accept ETH");
        uint256 allowance = token.allowance(buyer, address(this));
        require(allowance >= quantity, "Token allowance not enough");
        token.transferFrom(buyer, address(this), quantity);
        emit PaymentReceived();
        currentState = State.AWAITING_DELIVERY;
    }

    function confirmDelivery() external {
        require(msg.sender == buyer || msg.sender == seller, "Invalid sender");
        require(currentState == State.AWAITING_DELIVERY, "Invalid state");
        require(block.timestamp >= releaseTime, "Release time not reached");
        token.transfer(seller, quantity);
        emit DeliveryConfirmed();
        currentState = State.COMPLETE;
    }

    function refund() external {
        require(msg.sender == buyer, "Invalid sender");
        require(currentState == State.AWAITING_DELIVERY, "Invalid state");
        token.transfer(buyer, quantity);
        emit Refunded();
        currentState = State.REFUNDED;
    }

    function lockTokens() external onlyOwner {
        require(currentState == State.AWAITING_PAYMENT, "Invalid state");
        token.transferFrom(buyer, address(this), quantity);
    }

    function unlockTokens() external onlyOwner {
        require(currentState == State.AWAITING_PAYMENT, "Invalid state");
        token.transfer(buyer, quantity);
    }
}
